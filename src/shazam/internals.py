from typing import Annotated
from numpy.typing import ArrayLike
from typing_extensions import Self


class MultiHeader:
    def __init__(self) -> None: ...

    @property
    def nf(self) -> int: ...

    @property
    def fh(self) -> float: ...

    @property
    def fl(self) -> float: ...

    @property
    def df(self) -> float: ...

    @property
    def bw(self) -> float: ...

    @property
    def dt(self) -> float: ...

    @property
    def nbits(self) -> int: ...

    @property
    def nstokes(self) -> int: ...

    @property
    def flipped(self) -> bool: ...

    @property
    def ra(self) -> float: ...

    @property
    def dec(self) -> float: ...

    @property
    def source(self) -> str: ...

    @property
    def beammode(self) -> str: ...

    @property
    def observer(self) -> str: ...

    @property
    def gtaccode(self) -> str: ...

    @property
    def gtactitle(self) -> str: ...

    @property
    def antmaskpol1(self) -> int: ...

    @property
    def antmaskpol2(self) -> int: ...

    @property
    def antspol1(self) -> list[str]: ...

    @property
    def antspol2(self) -> list[str]: ...

    @property
    def beamid(self) -> int: ...

    @property
    def hostid(self) -> int: ...

    @property
    def nbeams(self) -> int: ...

    @property
    def hostname(self) -> str: ...

    @property
    def npcbaselines(self) -> int: ...

    @property
    def nbeamspernode(self) -> int: ...

    @property
    def beamras(self) -> list[float]: ...

    @property
    def beamdecs(self) -> list[float]: ...

    @property
    def linked(self) -> bool: ...

    def link(self) -> None: ...

    def unlink(self) -> None: ...

    def asdict(self) -> dict: ...

    def __enter__(self) -> Self: ...

    def __exit__(self, *args) -> None: ...


class MultiTELSHM:
    def __init__(self) -> None: ...

    @property
    def nf(self) -> int: ...

    @property
    def fh(self) -> float: ...

    @property
    def fl(self) -> float: ...

    @property
    def df(self) -> float: ...

    @property
    def bw(self) -> float: ...

    @property
    def dt(self) -> float: ...

    @property
    def nbits(self) -> int: ...

    @property
    def nstokes(self) -> int: ...

    @property
    def flipped(self) -> bool: ...

    @property
    def ra(self) -> float: ...

    @property
    def dec(self) -> float: ...

    @property
    def source(self) -> str: ...

    @property
    def obsdate(self) -> str: ...

    @property
    def obstime(self) -> str: ...

    @property
    def beammode(self) -> str: ...

    @property
    def observer(self) -> str: ...

    @property
    def gtaccode(self) -> str: ...

    @property
    def gtactitle(self) -> str: ...

    @property
    def antmaskpol1(self) -> int: ...

    @property
    def antmaskpol2(self) -> int: ...

    @property
    def antspol1(self) -> list[str]: ...

    @property
    def antspol2(self) -> list[str]: ...

    @property
    def beamid(self) -> int: ...

    @property
    def hostid(self) -> int: ...

    @property
    def nbeams(self) -> int: ...

    @property
    def hostname(self) -> str: ...

    @property
    def npcbaselines(self) -> int: ...

    @property
    def nbeamspernode(self) -> int: ...

    @property
    def beamras(self) -> list[float]: ...

    @property
    def beamdecs(self) -> list[float]: ...

    @property
    def header(self) -> dict: ...

    @property
    def linked(self) -> bool: ...

    @property
    def maxblks(self) -> int: ...

    @property
    def blksize(self) -> int: ...

    @property
    def blksamps(self) -> int: ...

    @property
    def blktime(self) -> float: ...

    @property
    def curtime(self) -> float: ...

    @property
    def begtime(self) -> float: ...

    @property
    def endtime(self) -> float: ...

    @property
    def currec(self) -> int: ...

    @property
    def curblk(self) -> int: ...

    def link(self) -> None: ...

    def unlink(self) -> None: ...

    def timeofblk(self, blk: int) -> float: ...

    def getblk(
        self, beam: int, blk: int
    ) -> Annotated[ArrayLike, dict(dtype="uint8", shape=(None, None))]: ...

    def getblks(
        self, beam: int, blk0: int, blkN: int
    ) -> Annotated[ArrayLike, dict(dtype="uint8", shape=(None, None))]: ...

    def getslice(
        self, beam: int, tbeg: float, tend: float
    ) -> Annotated[ArrayLike, dict(dtype="uint8", shape=(None, None))]: ...

    def __enter__(self) -> Self: ...

    def __exit__(self, *args) -> None: ...


class MultiFRBSHM:
    def __init__(self) -> None: ...

    @property
    def nf(self) -> int: ...

    @property
    def fh(self) -> float: ...

    @property
    def fl(self) -> float: ...

    @property
    def df(self) -> float: ...

    @property
    def bw(self) -> float: ...

    @property
    def dt(self) -> float: ...

    @property
    def nbits(self) -> int: ...

    @property
    def nstokes(self) -> int: ...

    @property
    def flipped(self) -> bool: ...

    @property
    def ra(self) -> float: ...

    @property
    def dec(self) -> float: ...

    @property
    def source(self) -> str: ...

    @property
    def obsdate(self) -> str: ...

    @property
    def obstime(self) -> str: ...

    @property
    def beammode(self) -> str: ...

    @property
    def observer(self) -> str: ...

    @property
    def gtaccode(self) -> str: ...

    @property
    def gtactitle(self) -> str: ...

    @property
    def antmaskpol1(self) -> int: ...

    @property
    def antmaskpol2(self) -> int: ...

    @property
    def antspol1(self) -> list[str]: ...

    @property
    def antspol2(self) -> list[str]: ...

    @property
    def beamid(self) -> int: ...

    @property
    def hostid(self) -> int: ...

    @property
    def nbeams(self) -> int: ...

    @property
    def hostname(self) -> str: ...

    @property
    def npcbaselines(self) -> int: ...

    @property
    def nbeamspernode(self) -> int: ...

    @property
    def beamras(self) -> list[float]: ...

    @property
    def beamdecs(self) -> list[float]: ...

    @property
    def header(self) -> dict: ...

    @property
    def size(self) -> int: ...

    @property
    def empty(self) -> bool: ...

    @property
    def linked(self) -> bool: ...

    @property
    def status(self) -> bool: ...

    @property
    def active(self) -> bool: ...

    @property
    def maxblks(self) -> int: ...

    @property
    def blksize(self) -> int: ...

    @property
    def blksamps(self) -> int: ...

    @property
    def blktime(self) -> float: ...

    @property
    def curtime(self) -> float: ...

    @property
    def begtime(self) -> float: ...

    @property
    def endtime(self) -> float: ...

    @property
    def currec(self) -> int: ...

    @property
    def curblk(self) -> int: ...

    def link(self) -> None: ...

    def unlink(self) -> None: ...

    def timeofblk(self, blk: int) -> float: ...

    def getblk(
        self, beam: int, blk: int
    ) -> Annotated[ArrayLike, dict(dtype="uint8", shape=(None, None))]: ...

    def getblks(
        self, beam: int, blk0: int, blkN: int
    ) -> Annotated[ArrayLike, dict(dtype="uint8", shape=(None, None))]: ...

    def getslice(
        self, beam: int, tbeg: float, tend: float
    ) -> Annotated[ArrayLike, dict(dtype="uint8", shape=(None, None))]: ...

    def getburst(
        self, beam: int, t0: float, dm: float, width: float
    ) -> Annotated[ArrayLike, dict(dtype="uint8", shape=(None, None))]: ...

    def __enter__(self) -> Self: ...

    def __exit__(self, *args) -> None: ...
